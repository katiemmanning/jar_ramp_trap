BioR.theme +
labs(x = "Number of samples", y = "", colour = "Trap", shape = "Trap")
beetle_accum
pdf("beetle_accum.pdf", height=6, width=8) #height and width in inches
beetle_accum
dev.off()
#######
## code to check assumptions
if (!suppressWarnings(require(nortest))) install.packages("nortest")
citation("nortest")
if (!suppressWarnings(require(car))) install.packages("car")
citation("car")
if (!suppressWarnings(require(emmeans))) install.packages("emmeans")
citation("emmeans")
if (!suppressWarnings(require(bbmle))) install.packages("bbmle")
citation("bbmle")
if (!suppressWarnings(require(DHARMa))) install.packages("DHARMa")
citation("DHARMa")
if (!suppressWarnings(require(lme4))) install.packages("lme4")
citation("lme4")
if (!suppressWarnings(require(ggplot2))) install.packages("ggplot2")
citation("ggplot2")
if (!suppressWarnings(require(sjPlot))) install.packages("sjPlot")
citation("sjPlot")
if (!suppressWarnings(require(jtools))) install.packages("jtools")
citation("jtools")
if (!suppressWarnings(require(interactions))) install.packages("interactions")
citation("interactions")
#Order
##Order richness
dotchart(insects_order$richness, main = "richness", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 3.457e-07
# I believe bartlett.test is in the base stats package
with(insects_order, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.001997
library(lme4)
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
anova(richness.model_order)
plot(richness.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_order))
qqline(resid(richness.model_order))
plot(simulateResiduals(richness.model_order)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.3696
#dispersion test: p = 0.584
#outlier test: p = 0.37883
#no significant problems detected btw residual and predicted
densityPlot(rstudent(richness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_order)
influenceIndexPlot(richness.model_order, vars = c("Cook"), id = list(n = 3))
##Order abundance
dotchart(insects_order$abundance, main = "abundance", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 2.2 e-16
with(insects_order, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 2.2 e-16
abundance.model_order<-glmer(abundance ~ Trap + Date + (1 | Site:Replicate), data=insects_order, family = negative.binomial (4))
summary(abundance.model_order)
anova(abundance.model_order)
plot(abundance.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model_order))
qqline(resid(abundance.model_order))
plot(simulateResiduals(abundance.model_order)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.68799
#dispersion test: p = 0.616
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(abundance.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
#can't use for glmer
outlierTest(abundance.model_order)
influenceIndexPlot(abundance.model_order, vars = c("Cook"), id = list(n = 3))
##Order diversity
dotchart(insects_order$diversity, main = "diversity", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 4.856e-05
with(insects_order, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 4.9547e-07
diversity.model_order<-lmer(diversity ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(diversity.model_order)
anova(diversity.model_order)
plot(diversity.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model_order))
qqline(resid(diversity.model_order))
plot(simulateResiduals(diversity.model_order)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.09052
#dispersion test: p = 0.912
#outlier test: p = 0.14566
#no significant problems detected btw residual and predicted
densityPlot(rstudent(diversity.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model_order)
influenceIndexPlot(diversity.model_order, vars = c("Cook"), id = list(n = 3))
##Order evenness
dotchart(insects_order$evenness, main = "evenness", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 0.00010809
with(insects_order, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.13314
evenness.model_order<-lmer(evenness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(evenness.model_order)
anova(evenness.model_order)
plot(evenness.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model_order))
qqline(resid(evenness.model_order))
plot(simulateResiduals(evenness.model_order)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.06382
#dispersion test: p = 0.656
#outlier test: p = 0.14013
#no significant problems detected btw residual and predicted
densityPlot(rstudent(evenness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_order)
influenceIndexPlot(evenness.model_order, vars = c("Cook"), id = list(n = 3))
###
#Functional
##Functional richness
dotchart(insects$richness, main = "richness", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 0.0001176
with(insects, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.21232
richness.model<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects)
summary(richness.model)
anova(richness.model)
plot(richness.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model))
qqline(resid(richness.model))
plot(simulateResiduals(richness.model)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.43038
#dispersion test: p = 0.768
#outlier test: p = 0.14566
#no significant problems detected btw residual and predicted
densityPlot(rstudent(richness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model)
influenceIndexPlot(richness.model, vars = c("Cook"), id = list(n = 3))
##Functional abundance
dotchart(insects$abundance, main = "abundance", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(insects, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model<-glmer(abundance ~ Trap + Date + (1 | Site:Replicate), data=insects, family = negative.binomial (4.3))
summary(abundance.model)
anova(abundance.model)
plot(abundance.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model))
qqline(resid(abundance.model))
plot(simulateResiduals(abundance.model)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.90192
#dispersion test: p = 0.52
#outlier test: p = 0.92
#no significant problems detected btw residual and predicted
densityPlot(rstudent(abundance.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
#can't do for glmer
outlierTest(abundance.model)
influenceIndexPlot(abundance.model, vars = c("Cook"), id = list(n = 3))
##Functional diversity
dotchart(insects$diversity, main = "diversity", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 5.224e-05
with(insects, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 1.082e-05
diversity.model<-lmer(diversity ~ Trap + (1 | Site:Replicate), data=insects)
summary(diversity.model)
anova(diversity.model)
plot(diversity.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model))
qqline(resid(diversity.model))
plot(simulateResiduals(diversity.model)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.09851
#dispersion test: p = 0.88
#outlier test: p = 0.14566
#no significant problems detected
densityPlot(rstudent(diversity.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model)
influenceIndexPlot(diversity.model, vars = c("Cook"), id = list(n = 3))
##Functional evenness
dotchart(insects$evenness, main = "evenness", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 0.0007165
with(insects, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.297
evenness.model<-lmer(evenness ~ Trap + (1 | Site:Replicate), data=insects)
summary(evenness.model)
anova(evenness.model)
plot(evenness.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model))
qqline(resid(evenness.model))
plot(simulateResiduals(evenness.model)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.13148
#dispersion test: p = 0.88
#outlier test: p = 0.14013
#no significant problems detected
densityPlot(rstudent(evenness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model)
influenceIndexPlot(evenness.model, vars = c("Cook"), id = list(n = 3))
#
##Flying richness
dotchart(flying$richness, main = "richness", group = flying$Trap) # way to visualize outliers
with(flying, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 4.0911e-10
with(flying, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 3.1868e-09
richness.model_flying<-lm(richness ~ Trap, data=flying)
summary(richness.model_flying)
anova(richness.model_flying)
AIC(richness.model_flying)
plot(richness.model_flying) # check distribution of residuals
plot(simulateResiduals(richness.model_flying)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.10628
#dispersion test: p = 0.84
#outlier test: p = 0.37883
#Levene test for homogeneity of variance significant
densityPlot(rstudent(richness.model_flying)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_flying)
influenceIndexPlot(richness.model_flying, vars = c("Cook"), id = list(n = 3))
##Flying abundance
dotchart(flying$abundance, main = "abundance", group = insects$Trap) # way to visualize outliers
with(flying, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(flying, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_flying<-glm(abundance ~ Trap, data=flying, family = negative.binomial(2.5))
summary(abundance.model_flying)
anova(abundance.model_flying)
plot(abundance.model_flying) # check distribution of residuals
plot(simulateResiduals(abundance.model_flying)) # another way to check for normality and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(abundance.model_flying)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_flying)
influenceIndexPlot(abundance.model_flying, vars = c("Cook"), id = list(n = 3))
##Crawling richness
dotchart(crawling$richness, main = "richness", group = crawling$Trap) # way to visualize outliers
with(crawling, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 3.4109e-10
with(crawling, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.0067363
richness.model_crawling<-lm(richness ~ Trap, data=crawling)
summary(richness.model_crawling)
anova(richness.model_crawling)
plot(richness.model_crawling) # check distribution of residuals
plot(simulateResiduals(richness.model_crawling)) # another way to check for normailty and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(richness.model_crawling)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_crawling)
influenceIndexPlot(richness.model_crawling, vars = c("Cook"), id = list(n = 3))
##Crawling abundance
dotchart(crawling$abundance, main = "abundance", group = crawling$Trap) # way to visualize outliers
with(crawling, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(crawling, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_crawling<-lm(abundance ~ Trap, data=crawling, family = negative.binomial(2))
summary(abundance.model_crawling)
anova(abundance.model_crawling)
plot(abundance.model_crawling) # check distribution of residuals
plot(simulateResiduals(abundance.model_crawling)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0 -- sig deviation
#dispersion test: p = 0.84
#outlier test: p = 0.04389 -- sig deviation
#within-group deviations from uniformity significant
#Levene test for homogeneity of variance significant
densityPlot(rstudent(abundance.model_crawling)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_crawling)
influenceIndexPlot(abundance.model_crawling, vars = c("Cook"), id = list(n = 3))
##Intermediate richness
dotchart(intermediate$richness, main = "richness", group = intermediate$Trap) # way to visualize outliers
with(intermediate, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(intermediate, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.3165
richness.model_intermediate<-lm(richness ~ Trap, data=intermediate)
summary(richness.model_intermediate)
anova(richness.model_intermediate)
plot(richness.model_intermediate) # check distribution of residuals
plot(simulateResiduals(richness.model_intermediate)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.19865
#dispersion test: p = 0.84
#outlier test: p = 1
densityPlot(rstudent(richness.model_intermediate)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_intermediate)
influenceIndexPlot(richness.model_intermediate, vars = c("Cook"), id = list(n = 3))
##Intermediate abundance
dotchart(intermediate$abundance, main = "abundance", group = intermediate$Trap) # way to visualize outliers
with(intermediate, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(intermediate, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_intermediate<-glm(abundance ~ Trap, data=intermediate, family = negative.binomial(0.9))
summary(abundance.model_intermediate)
anova(abundance.model_intermediate)
plot(abundance.model_intermediate) # check distribution of residuals
plot(simulateResiduals(abundance.model_intermediate)) # another way to check for normality and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(abundance.model_intermediate)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_intermediate)
influenceIndexPlot(abundance.model_intermediate, vars = c("Cook"), id = list(n = 3))
##
#Beetles
##beetle richness
dotchart(beetle$richness, main = "richness", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
richness.model_beetle<-lmer(richness ~ Trap + Date + (1 | Site), data=beetle)
summary(richness.model_beetle)
anova(richness.model_beetle)
AIC (richness.model_beetle)
plot(richness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_beetle))
qqline(resid(richness.model_beetle))
plot(simulateResiduals(richness.model_beetle)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.40783
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(richness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_beetle)
influenceIndexPlot(richness.model_beetle, vars = c("Cook"), id = list(n = 3))
#beetle abundance
dotchart(beetle$abundance, main = "abundance", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
abundance.model_beetle<-lmer(abundance ~ Trap + Date + (1 | Site), data=beetle)
summary(abundance.model_beetle)
anova(abundance.model_beetle)
plot(abundance.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model_beetle))
qqline(resid(abundance.model_beetle))
plot(simulateResiduals(abundance.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.40783
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(abundance.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_beetle)
influenceIndexPlot(abundance.model_beetle, vars = c("Cook"), id = list(n = 3))
##beetle diversity
dotchart(beetle$diversity, main = "diversity", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
diversity.model_beetle<-lmer(diversity ~ Trap + Date + (1 | Site), data=beetle)
summary(diversity.model_beetle)
anova(diversity.model_beetle)
plot(diversity.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model_beetle))
qqline(resid(diversity.model_beetle))
plot(simulateResiduals(diversity.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.79254
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(diversity.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model_beetle)
influenceIndexPlot(diversity.model_beetle, vars = c("Cook"), id = list(n = 3))
##beetle evenness
dotchart(beetle$evenness, main = "evenness", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 3.465e-06
with(beetle, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 1
evenness.model_beetle<-lmer(evenness ~ Trap + Date + (1 | Site), data=beetle)
summary(evenness.model_beetle)
anova(evenness.model_beetle)
plot(evenness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model_beetle))
qqline(resid(evenness.model_beetle))
plot(simulateResiduals(evenness.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.2596
#dispersion test: p = 0.096
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(evenness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_beetle)
influenceIndexPlot(evenness.model_beetle, vars = c("Cook"), id = list(n = 3))
#######
#manuscript figures
#Figure 1 - trap photos
#Figure 2 - step by step jar trap construction
#Figure 3 - accumulation plots
#a - order
#b - functional
#c - beetles
figure3 <- ggarrange(order_accum, functional_accum, beetle_accum,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3,
common.legend = TRUE, legend = "bottom")
figure3
pdf("Figure 3.pdf", height=6, width=6) #height and width in inches
figure3
dev.off()
#Figure 4 - trap comparison box plots
#a - order
library(ggpubr)
orderfigure <- ggarrange(richness.plot_order, abundance.plot_order, diversity.plot_order, evenness.plot_order,
ncol = 4, nrow = 1)
orderfigure
#b - functional
functionalfigure <- ggarrange(richness.plot, abundance.plot, diversity.plot, evenness.plot,
ncol = 4, nrow = 1)
functionalfigure
#c - beetle
beetlefigure <- ggarrange(richness.plot_beetle, abundance.plot_beetle, diversity.plot_beetle, evenness.plot_beetle,
ncol = 4, nrow = 1,
common.legend = TRUE, legend = "bottom")
beetlefigure
figure4 <- ggarrange(orderfigure, functionalfigure, beetlefigure,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3,
common.legend = TRUE, legend = "bottom")
pdf("Figure 4.pdf", height=10, width=15) #height and width in inches
figure4
dev.off()
figure4
#Figure 5 - multipanel NMDS
#if (!require(devtools)) {
#install.packages("devtools")
#}
#devtools::install_github("gavinsimpson/ggvegan")
library(ggvegan)
pdf("Figure 5.pdf", height=9, width=7)
par(mfrow=c(3,1), mar=c(4.1, 4.8, 1.5, 8.1),xpd=TRUE)
plot(NMDS_order, disp='sites', type='n')
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="jar"), pch=17, col="#009E73")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="sticky"), pch=25, col="#CC79A7")
ordilabel(NMDS_order, display="species", select =which (include_order==TRUE & crawling_order == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS_order, display="species", select =which (include_order==TRUE & flying_order == TRUE), cex=0.6, col="white", fill="black")
legend(2.8,1.35, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
text(-4, 0.95, "A", cex=2)
plot(NMDS, disp='sites', type='n')
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
points(NMDS, display="sites", select=which(env.matrix$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS, display="sites", select=which(env.matrix$Trap=="jar"), pch=17, col="#009E73")
points(NMDS, display="sites", select=which(env.matrix$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS, display="sites", select=which(env.matrix$Trap=="sticky"), pch=25, col="#CC79A7")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & crawling_func == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & flying_func == TRUE), cex=0.6, col="white", fill="black")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & intermediate_func == TRUE), cex=0.6, col="black", fill="gray")
text(-4.1, 1, "B", cex=2)
dev.off()
#Figure 6 - flying vs crawling vs intermediate (functional level)
figure6 <- ggarrange(abundance.plot_flying, abundance.plot_crawling,abundance.plot_intermediate,richness.plot_flying,richness.plot_crawling,richness.plot_intermediate,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 2,
common.legend = TRUE, legend = "bottom")
figure6
pdf("Figure 6.pdf", height=6, width=8) #height and width in inches
figure6
dev.off()
#Supplementary figure 1 - trap size vs mean catch
#bring in data
size <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Supp%20fig%201%20data.csv",na.strings = NULL)
library(ggplot2)
trapsize <- ggplot(size, aes(x=Surface.area, y=Mean.catch, color=Trap)) +
theme_classic() +
geom_point(size=4.5, shape=16)+
labs(x = bquote("Trap surface area"~(cm^2)), y = "Arthropods captured")+
geom_errorbar(aes(ymin=Mean.catch-SD, ymax=Mean.catch+SD),size=1, width=3)+
scale_color_manual(values=c("#009E73","#E69F00","#CC79A7","#F0E442"))
trapsize
pdf("Supp figure 1.pdf", height=6, width=8) #height and width in inches
trapsize
dev.off()
#Table S1 - abundances
#Table S2 - comparisons
#Table S3 - functional comparisons
