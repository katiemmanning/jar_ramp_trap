with(insects, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 1.082e-05
diversity.model<-lmer(diversity ~ Trap + (1 | Site:Replicate), data=insects)
summary(diversity.model)
anova(diversity.model)
plot(diversity.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model))
qqline(resid(diversity.model))
plot(simulateResiduals(diversity.model)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.09851
#dispersion test: p = 0.88
#outlier test: p = 0.14566
#no significant problems detected
densityPlot(rstudent(diversity.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model)
influenceIndexPlot(diversity.model, vars = c("Cook"), id = list(n = 3))
##Functional evenness
dotchart(insects$evenness, main = "evenness", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 0.0007165
with(insects, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.297
evenness.model<-lmer(evenness ~ Trap + (1 | Site:Replicate), data=insects)
summary(evenness.model)
anova(evenness.model)
plot(evenness.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model))
qqline(resid(evenness.model))
plot(simulateResiduals(evenness.model)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.13148
#dispersion test: p = 0.88
#outlier test: p = 0.14013
#no significant problems detected
densityPlot(rstudent(evenness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model)
influenceIndexPlot(evenness.model, vars = c("Cook"), id = list(n = 3))
#
##Flying richness
dotchart(flying$richness, main = "richness", group = flying$Trap) # way to visualize outliers
with(flying, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 4.0911e-10
with(flying, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 3.1868e-09
richness.model_flying<-lm(richness ~ Trap, data=flying)
summary(richness.model_flying)
anova(richness.model_flying)
AIC(richness.model_flying)
plot(richness.model_flying) # check distribution of residuals
plot(simulateResiduals(richness.model_flying)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.10628
#dispersion test: p = 0.84
#outlier test: p = 0.37883
#Levene test for homogeneity of variance significant
densityPlot(rstudent(richness.model_flying)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_flying)
influenceIndexPlot(richness.model_flying, vars = c("Cook"), id = list(n = 3))
##Flying abundance
dotchart(flying$abundance, main = "abundance", group = insects$Trap) # way to visualize outliers
with(flying, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(flying, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_flying<-glm(abundance ~ Trap, data=flying, family = negative.binomial(2.5))
summary(abundance.model_flying)
anova(abundance.model_flying)
plot(abundance.model_flying) # check distribution of residuals
plot(simulateResiduals(abundance.model_flying)) # another way to check for normality and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(abundance.model_flying)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_flying)
influenceIndexPlot(abundance.model_flying, vars = c("Cook"), id = list(n = 3))
##Crawling richness
dotchart(crawling$richness, main = "richness", group = crawling$Trap) # way to visualize outliers
with(crawling, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 3.4109e-10
with(crawling, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.0067363
richness.model_crawling<-lm(richness ~ Trap, data=crawling)
summary(richness.model_crawling)
anova(richness.model_crawling)
plot(richness.model_crawling) # check distribution of residuals
plot(simulateResiduals(richness.model_crawling)) # another way to check for normailty and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(richness.model_crawling)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_crawling)
influenceIndexPlot(richness.model_crawling, vars = c("Cook"), id = list(n = 3))
##Crawling abundance
dotchart(crawling$abundance, main = "abundance", group = crawling$Trap) # way to visualize outliers
with(crawling, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(crawling, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_crawling<-lm(abundance ~ Trap, data=crawling, family = negative.binomial(2))
summary(abundance.model_crawling)
anova(abundance.model_crawling)
plot(abundance.model_crawling) # check distribution of residuals
plot(simulateResiduals(abundance.model_crawling)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0 -- sig deviation
#dispersion test: p = 0.84
#outlier test: p = 0.04389 -- sig deviation
#within-group deviations from uniformity significant
#Levene test for homogeneity of variance significant
densityPlot(rstudent(abundance.model_crawling)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_crawling)
influenceIndexPlot(abundance.model_crawling, vars = c("Cook"), id = list(n = 3))
##Intermediate richness
dotchart(intermediate$richness, main = "richness", group = intermediate$Trap) # way to visualize outliers
with(intermediate, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(intermediate, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.3165
richness.model_intermediate<-lm(richness ~ Trap, data=intermediate)
summary(richness.model_intermediate)
anova(richness.model_intermediate)
plot(richness.model_intermediate) # check distribution of residuals
plot(simulateResiduals(richness.model_intermediate)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.19865
#dispersion test: p = 0.84
#outlier test: p = 1
densityPlot(rstudent(richness.model_intermediate)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_intermediate)
influenceIndexPlot(richness.model_intermediate, vars = c("Cook"), id = list(n = 3))
##Intermediate abundance
dotchart(intermediate$abundance, main = "abundance", group = intermediate$Trap) # way to visualize outliers
with(intermediate, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.22e-16
with(intermediate, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.22e-16
abundance.model_intermediate<-glm(abundance ~ Trap, data=intermediate, family = negative.binomial(0.9))
summary(abundance.model_intermediate)
anova(abundance.model_intermediate)
plot(abundance.model_intermediate) # check distribution of residuals
plot(simulateResiduals(abundance.model_intermediate)) # another way to check for normality and homogeneity of variance
#doesn't run
#Error in h(simpleError(msg, call)) : error in evaluating the argument 'x' in selecting a method for function 'plot': could not find function "rnegbin"
densityPlot(rstudent(abundance.model_intermediate)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_intermediate)
influenceIndexPlot(abundance.model_intermediate, vars = c("Cook"), id = list(n = 3))
##
#Beetles
##beetle richness
dotchart(beetle$richness, main = "richness", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
richness.model_beetle<-lmer(richness ~ Trap + Date + (1 | Site), data=beetle)
summary(richness.model_beetle)
anova(richness.model_beetle)
AIC (richness.model_beetle)
plot(richness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_beetle))
qqline(resid(richness.model_beetle))
plot(simulateResiduals(richness.model_beetle)) # another way to check for normality and homogeneity of variance
#KS test: p = 0.40783
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(richness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_beetle)
influenceIndexPlot(richness.model_beetle, vars = c("Cook"), id = list(n = 3))
#beetle abundance
dotchart(beetle$abundance, main = "abundance", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
abundance.model_beetle<-lmer(abundance ~ Trap + Date + (1 | Site), data=beetle)
summary(abundance.model_beetle)
anova(abundance.model_beetle)
plot(abundance.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model_beetle))
qqline(resid(abundance.model_beetle))
plot(simulateResiduals(abundance.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.40783
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(abundance.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_beetle)
influenceIndexPlot(abundance.model_beetle, vars = c("Cook"), id = list(n = 3))
##beetle diversity
dotchart(beetle$diversity, main = "diversity", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = < 2.2e-16
with(beetle, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = < 2.2e-16
diversity.model_beetle<-lmer(diversity ~ Trap + Date + (1 | Site), data=beetle)
summary(diversity.model_beetle)
anova(diversity.model_beetle)
plot(diversity.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model_beetle))
qqline(resid(diversity.model_beetle))
plot(simulateResiduals(diversity.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.79254
#dispersion test: p = 0.28
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(diversity.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model_beetle)
influenceIndexPlot(diversity.model_beetle, vars = c("Cook"), id = list(n = 3))
##beetle evenness
dotchart(beetle$evenness, main = "evenness", group = beetle$Trap) # way to visualize outliers
with(beetle, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 3.465e-06
with(beetle, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 1
evenness.model_beetle<-lmer(evenness ~ Trap + Date + (1 | Site), data=beetle)
summary(evenness.model_beetle)
anova(evenness.model_beetle)
plot(evenness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model_beetle))
qqline(resid(evenness.model_beetle))
plot(simulateResiduals(evenness.model_beetle)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.2596
#dispersion test: p = 0.096
#outlier test: p = 1
#no significant problems detected btw residual and predicted
densityPlot(rstudent(evenness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_beetle)
influenceIndexPlot(evenness.model_beetle, vars = c("Cook"), id = list(n = 3))
#######
#manuscript figures
#Figure 3 - accumulation plots
#a - order
#b - functional
#c - beetles
require(grid)   # for the textGrob() function
library(patchwork)
order_accum  + functional_accum + beetle_accum
order_accum / functional_accum / beetle_accum
figure3 <- order_accum / functional_accum / beetle_accum
figure3+plot_annotation(tag_levels = A)
figure3+plot_annotation(tag_levels = "A")
figure3 <- annotate_figure(figure3, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3
figure3 <- order_accum / functional_accum / beetle_accum
figure3 <- order_accum / functional_accum / beetle_accum
figure3 <- annotate_figure(figure3, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3+plot_annotation(tag_levels = "A")
figure3
patchwork <- order_accum / functional_accum / beetle_accum
figure3 <- annotate_figure(patchwork, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3
patchwork <- order_accum / functional_accum / beetle_accum
figure3 <- annotate_figure(patchwork, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3+plot_annotation(tag_levels = "A")
figure3
patchwork <- order_accum / functional_accum / beetle_accum
patchwork
figure3 <- annotate_figure(patchwork, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3+plot_annotation(tag_levels = "A")
patchwork <- order_accum / functional_accum / beetle_accum & theme(legend.position = "bottom")
patchwork
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom")
patchwork
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom") & theme(axis.title.y.left = "Richness")
patchwork
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom") & theme(axis.title.y = "Richness")
patchwork
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom") & theme(axis.title.y = Richness)
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom") & theme(axis.title.y = "Richness")
patchwork <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom")
patchwork
figure3 <- annotate_figure(patchwork, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
figure3
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") & theme(legend.position = "bottom")
figure3+plot_annotation(tag_levels = "A")
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
gt <- patchwork::patchworkGrob(figure3)
gridExtra::grid.arrange(gt, left = "Richness")
gridExtra::grid.arrange(gt, left = "Richness", bottom = "Number of Samples")
gridExtra::grid.arrange(gt, left = "Richness")
gridExtra::grid.arrange(gt, left = "Richness", vjust = 0.7, hjust = 0)
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
final <- annotate_figure(figure3, left = textGrob("Richness", rot = 90, vjust = 0.7, hjust = 0, gp = gpar(cex = 1.2)))
final
figure3.0 <- patchwork::patchworkGrob(figure3)
gridExtra::grid.arrange(figure3.0, left = "Richness")
gridExtra::grid.arrange(figure3.0, left = "Richness", text=element_text(size=20))
gridExtra::grid.arrange(figure3.0, left = "Richness") &
theme(plot.tag = element_text(face = 'bold'))
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
figure3.0 <- patchwork::patchworkGrob(figure3)
gridExtra::grid.arrange(figure3.0, left = "Richness")
pdf("Figure 3.pdf", height=6, width=6) #height and width in inches
figure3.0
dev.off()
figure3.0 <- patchwork::patchworkGrob(figure3)
figure3.1<- gridExtra::grid.arrange(figure3.0, left = "Richness")
figure3.1
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
figure3.0 <- patchwork::patchworkGrob(figure3)
figure3.1<- gridExtra::grid.arrange(figure3.0, left = "Richness")
BioR.theme <- theme(
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.line = element_line("gray25"),
text = element_text(size = 12),
axis.text = element_text(size = 10, colour = "gray25"),
axis.title = element_text(size = 14, colour = "gray25"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
legend.key = element_blank())
functional_accum <- ggplot(data=accum.long1_functional, aes(x = Sites, y = Richness, ymax = UPR, ymin = LWR)) +
scale_x_continuous(expand=c(0, 1), sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_color_manual(values=c("#009E73","#E69F00","#F0E442","#CC79A7"))+
scale_shape_manual(values=c(19,17,15,25))+
geom_line(aes(colour=Grouping), size=0.1) +
geom_ribbon(aes(colour=Grouping, fill=after_scale(alpha(colour, 0.3))),
show.legend=FALSE, linetype = 0) +
geom_point(data=subset(accum.long1_functional, labelit==TRUE),
aes(colour=Grouping, shape=Grouping), size=3) +
BioR.theme +
labs(x = "", y = "Richness", colour = "Trap", shape = "Trap")
functional_accum
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
figure3.0 <- patchwork::patchworkGrob(figure3)
figure3.1<- gridExtra::grid.arrange(figure3.0, left = "Richness")
figure3 <- order_accum / functional_accum / beetle_accum + plot_layout(guides = "collect") + plot_annotation(tag_levels = "A") & theme(legend.position = "bottom")
figure3
pdf("Figure 3.pdf", height=6, width=6) #height and width in inches
figure3
dev.off()
pitfall_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_pitfall_order.csv",na.strings = NULL)
ramp_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_yellowramp_order.csv",na.strings = NULL)
jar_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_jarramp_order.csv",na.strings = NULL)
sticky_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_stickycard_order.csv",na.strings = NULL)
taxa_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Order%20taxa.csv")
#add trap type as a column on each data file
pitfall_order$Trap="pitfall"
ramp_order$Trap="ramp"
jar_order$Trap="jar"
sticky_order$Trap="sticky"
#calculate mean and SE richness and abundance of each trap type
insects.abun <- rowSums(pitfall_order[,5:16])
pitfall_order$abundance <- insects.abun
insects.rowsums <- rowSums(pitfall_order[,5:16]>0)
pitfall_order$richness <- insects.rowsums
insects.abun <- rowSums(jar_order[,5:16])
jar_order$abundance <- insects.abun
insects.rowsums <- rowSums(jar_order[,5:16]>0)
jar_order$richness <- insects.rowsums
insects.abun <- rowSums(ramp_order[,5:16])
ramp_order$abundance <- insects.abun
insects.rowsums <- rowSums(ramp_order[,5:16]>0)
ramp_order$richness <- insects.rowsums
insects.abun <- rowSums(sticky_order[,5:16])
sticky_order$abundance <- insects.abun
insects.rowsums <- rowSums(sticky_order[,5:16]>0)
sticky_order$richness <- insects.rowsums
mean(pitfall_order$abundance) #14.82
sd(pitfall_order$abundance)/sqrt(10) #3.73
mean(pitfall_order$richness) #4.31
sd(pitfall_order$richness)/sqrt(10) #0.51
mean(jar_order$abundance) #26.2
sd(jar_order$abundance)/sqrt(10) #4.97
mean(jar_order$richness) #5
sd(jar_order$richness)/sqrt(10) #0.45
mean(ramp_order$abundance) #184.71
sd(ramp_order$abundance)/sqrt(10) #44.25
mean(ramp_order$richness) #7.81
sd(ramp_order$richness)/sqrt(10) #0.32
mean(sticky_order$abundance) #99.98
sd(sticky_order$abundance)/sqrt(10) #17.85
mean(sticky_order$richness) #5.90
sd(sticky_order$richness)/sqrt(10) #.30
#combine order data tables
library (plyr)
pitfallramp_order <- rbind.fill (pitfall_order, ramp_order)
pitfallrampjar_order <-rbind.fill (pitfallramp_order, jar_order)
insects_order <- rbind.fill (pitfallrampjar_order, sticky_order)
str(insects_order) #trap is listed as character
insects_order$Trap <- as.factor(insects_order$Trap)
str(insects_order) #now trap is listed as a fa
library(lme4)
library(lmerTest) #to obtain p values
library (emmeans) #for pairwise comparisons
library (multcompView) #to view letters
library (car)
insects.abun_order <- rowSums(insects_order[,5:16])
insects_order$abundance <- insects.abun_order
#calculate order Richness
insects.rowsums_order <- rowSums(insects_order[,5:16]>0)
insects_order$richness <- insects.rowsums_order
#calculate order Shannon diversity
diversity_order <-diversity(insects_order[,5:16])
#order richness
#AIC 559
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
Anova (richness.model_order)
#pairwise comparison
rich.emm_order<-emmeans(richness.model_order,pairwise~Trap)
rich.emm_order
#results: sig diff btw all
rich.cld_order<-multcomp::cld(rich.emm_order, alpha = 0.05, Letters = LETTERS)
rich.cld_order
pitfall_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_pitfall_order.csv",na.strings = NULL)
ramp_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_yellowramp_order.csv",na.strings = NULL)
jar_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_jarramp_order.csv",na.strings = NULL)
sticky_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Insect%20ID%202020_stickycard_order.csv",na.strings = NULL)
taxa_order <- read.csv("https://raw.githubusercontent.com/katiemmanning/jar_ramp_trap/main/Data/Order%20taxa.csv")
#add trap type as a column on each data file
pitfall_order$Trap="pitfall"
ramp_order$Trap="ramp"
jar_order$Trap="jar"
sticky_order$Trap="sticky"
#calculate mean and SE richness and abundance of each trap type
insects.abun <- rowSums(pitfall_order[,5:16])
pitfall_order$abundance <- insects.abun
insects.rowsums <- rowSums(pitfall_order[,5:16]>0)
pitfall_order$richness <- insects.rowsums
insects.abun <- rowSums(jar_order[,5:16])
jar_order$abundance <- insects.abun
insects.rowsums <- rowSums(jar_order[,5:16]>0)
jar_order$richness <- insects.rowsums
insects.abun <- rowSums(ramp_order[,5:16])
ramp_order$abundance <- insects.abun
insects.rowsums <- rowSums(ramp_order[,5:16]>0)
ramp_order$richness <- insects.rowsums
insects.abun <- rowSums(sticky_order[,5:16])
sticky_order$abundance <- insects.abun
insects.rowsums <- rowSums(sticky_order[,5:16]>0)
sticky_order$richness <- insects.rowsums
mean(pitfall_order$abundance) #14.82
sd(pitfall_order$abundance)/sqrt(10) #3.73
mean(pitfall_order$richness) #4.31
sd(pitfall_order$richness)/sqrt(10) #0.51
mean(jar_order$abundance) #26.2
sd(jar_order$abundance)/sqrt(10) #4.97
mean(jar_order$richness) #5
sd(jar_order$richness)/sqrt(10) #0.45
mean(ramp_order$abundance) #184.71
sd(ramp_order$abundance)/sqrt(10) #44.25
mean(ramp_order$richness) #7.81
sd(ramp_order$richness)/sqrt(10) #0.32
mean(sticky_order$abundance) #99.98
sd(sticky_order$abundance)/sqrt(10) #17.85
mean(sticky_order$richness) #5.90
sd(sticky_order$richness)/sqrt(10) #.30
#combine order data tables
library (plyr)
pitfallramp_order <- rbind.fill (pitfall_order, ramp_order)
pitfallrampjar_order <-rbind.fill (pitfallramp_order, jar_order)
insects_order <- rbind.fill (pitfallrampjar_order, sticky_order)
str(insects_order) #trap is listed as character
insects_order$Trap <- as.factor(insects_order$Trap)
str(insects_order) #now trap is listed as a factor
#############
#NMDS of insect community by order between trap types
library (vegan)
insects.abun_order <- rowSums(insects_order[,5:16])
insects_order$abundance <- insects.abun_order
#calculate order Richness
insects.rowsums_order <- rowSums(insects_order[,5:16]>0)
insects_order$richness <- insects.rowsums_order
#calculate order Shannon diversity
diversity_order <-diversity(insects_order[,5:16])
insects_order$diversity <-diversity_order
#calculate order Evenness
evenness_order <-diversity_order/log(specnumber(insects_order[,5:16]))
insects_order$evenness <- evenness_order
library (emmeans) #for pairwise comparisons
library (multcompView) #to view letters
#order richness
#AIC 559
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
#pairwise comparison
rich.emm_order<-emmeans(richness.model_order,pairwise~Trap)
#######
#Mixed effects models
library(lme4)
library(lmerTest) #to obtain p values
#order richness
#AIC 559
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
Anova (richness.model_order)
AIC(richness.model_order)
#pairwise comparison
rich.emm_order<-emmeans(richness.model_order,pairwise~Trap)
rich.emm_order
